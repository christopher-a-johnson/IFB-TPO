elli.builder.constant = (function () {
    'use strict';

    var workSpaceConstant = {
        moveMode: 'moveMode',
        active: 'active',
        ribbonHeader: '#ribbonHeader',
        responseBadDataError: 400,
        controlButtonClass: '.control-button',
        newFormDefaultText: 'New Form',
        newFormDescription: 'Description',
        propertyMode: 'propMode',
        modeMoveClass: '.moveMode',
        formCloseMessage: 'You have made changes to this page that have not been saved',
        modePropertyClass: '.propMode',
        newControl: '.new-Control',
        gridContainerUISelected: '.grid_panel',
        gridPanelControlSelected: '.grid_panel .new-Control',
        panelCount: 'panels',
        controlCount: 'controls',
        assetCount: 'assets',
        kmSwitchContainer: '.km-switch-container',
        switchBorderBlue: 'switchBorderBlue',
        switchBorderGray: 'switchBorderGray',
        saveButton: '#saveButton',
        gridContainmentClass: '.fieldContainer',
        sessionStorage: 'sessionStorage',
        layersPanel: '.layers-panel',
        builderWorkspace: '#builderWorkspace',
        hiddenWorkspace: '.hidden-workspace',
        hiddenWorkspaceId: '#hiddenWorkspace',
        formSchema: 'formSchema',
        formEnabled: '#formEnabled',
        formEnabledField: '#formEnabledField',
        formPropertiesPanel: '#formPropertiesPanel',
        propertyCollapse1: '#propertyCollapse1',
        propertyCollapse: '#propertyCollapse',
        rbnLayoutCtrlContainer: '.ribbon-layout-controls-container'
    };

    var formAPIs = {
        getInputFormAPI: 'inputforms',
        saveInputFormAPI: 'inputforms'
    };

    var controlConstant = {
        uiPixelGrid: 4,          //Define the grid for resize and drag
        resizeHandle: 'n,e,s,w, ne, se, sw, nw',
        classUiSelected: 'ui-selected',
        classUiSelecting: 'ui-selecting',
        newControl: 'new-Control',
        controlButton: 'control-button',
        ribbonLayoutCtrl: 'ribbon-layout-controls',
        gridContainer: '.grid_container',
        selectedElement: 'selectedElement',
        uiContainment: '.fieldContainer',
        controlContainer: '.control-container',
        container: '#container_',
        resizableControls: ['TextBox', 'Dropdown', 'Calendar', 'Checkbox', 'RadioButton', 'MultilineTextBox', 'Paragraph'],
        selectedGridPanel: 'ul.gridListContainer li.ui-selected .fieldContainer',
        controlType: 'controltype',
        label: 'label',
        moveCursor: 'move-cursor',
        pointerCursor: 'pointer-cursor',
        classDisabledClick: 'disabled-click',
        controlParagraphClass: 'control_Paragraph',
        paragraphEditorClass: '.paragraphEditor',
        containerId: 'container_',
        contenteditable: 'contenteditable'
    };

    var controlTypes = {
        form: 'Form',
        gridPanel: 'Grid Panel',
        imageCtrl: 'Image',
        button: 'Button',
        paragraph: 'Paragraph',
        multilineTextBox: 'MultilineTextBox',
        dropdown: 'Dropdown',
        textBox: 'TextBox',
        panel: 'Panel'
    };

    var tabNames = {
        appearance: 'appearance',
        behavior: 'behavior',
        cssStyle: 'css'
    };

    var propertyPanelConstant = {
        tabDivs: '#propertiesPanelTabs',
        paragraphStyle: '#paragraph-style',
        legend: '#propertyLegend',
        save: '#savePropertyChanges',
        cancel: '#cancelPropertyPanel',
        cog: '#propertiesCogButton',
        container: '#propertiesPanelDiv',
        delay: 600,
        grid: '#propertyPanelGrid',
        apply: '#propertyPanelApply',
        searchBox: '#propertyPanelSearchBox',
        linked: '#linkedPanelProperty',
        behaviorCSSContainer: '#propBehaviorCss',
        clear: '#clearProperty',
        formBehaviorCss: '#formBehaviorCss',
        gridAppearance: '#gridAppearance',
        imageAppearance: '#imageAppearance',
        formAppearance: '#formAppearance',
        imageAppearanceContents: '#imageAppearanceContents',
        imageStyle: '#imageStyle',
        imageSize: '#imageSize',
        imageHoverText: '#imageHoverText',
        imageSizeSlider: '#imageSizeSlider',
        linkedLabel: '#linkedLabel',
        sourceDataUri: '/api/fb/imagesGridData.json',
        fontAppearance: '#fontAppearance',
        bgColorAppearance: '#bgColorAppearance',
        borderAppearance: '#borderAppearance',
        tabForm: '#tabContentForm',
        appearanceFormWidth: '#appearanceFormWidth',
        formProperties: {},
        inputFormSchema: {},
        formSchema: 'formSchema',
        inputFormId: 'FormId',
        css: 'cssPanelProperty',
        appearanceContainer: '#propAppearance',
        controlType: controlTypes.form,
        controlId: '',
        stylesDataUri: '/api/fb/StylesGridData.json',
        scriptsDataUri: '/api/fb/ScriptsGridData.json',
        imageBehaviorContent: '#image-behavior-tab',
        formBehaviorContent: '#form-behavior-tab',
        imageBehaviorState: '#span-enable-image-control',
        selectedControls: '.grid_container .ui-selected',
        hiddenSelectedControls: '.new-Control.ui-selected',
        controlStateInput: '#image-enabled',
        appearanceTabDiv: '#dynamic-appearance-tab',
        behaviourTabDiv: '#dynamic-behavior-tab',
        cssTabDiv: '#dynamic-css-tab',
        buttonType: '#button-type',
        buttonStyle: '#button-style',
        customType: '#custom-button-type',
        imagePosition: '#image-position',
        buttonTypeID: 'button-type',
        fieldSource: '#textarea-fieldSource',
        textInputFieldSource: '#textinput-fieldSource',
        dropDownFieldSource: '#dropdown-fieldSource',
        lockIconPosition: '#textarea-lockIconPosition',
        textInputlockIconPosition: '#textinput-lockIconPosition',
        addressBookControlId: '#addressBookControlId',
        addressBookField: '#addressBookField',
        textAreaStyle: '#text-area-style',
        textAreaWidth: '#control-width-text',
        textAreaLabelPosition: '#text-area-labelPosition',
        dropdownWidth: '#dropdown-width',
        dropdownType: '#dropdown-type',
        dropdownStyle: '#dropdown-style',
        dropdownLabelPosition: '#dropdown-labelPosition',
        dropdownLabel: '#dropdown-label',
        dropdownHelpKey: '#dropdown-help-key',
        controlHoverText: '#control-hover-text',
        controlButtonText: '#control-button-text',
        controlTabIndex: '#control-tabIndex',
        paragraphHeight: '#paragraph-height',
        paragraphWidth: '#paragraph-width',
        controlIdInput: '#control-controlId',
        enabledControl: '#control-enabled',
        enabledMultiControl: '#control-enabled,#lockField-enabled',
        switchContainer: '#switch_container',
        standardBtnContainer: '#standard-btn-container',
        standardBtnSelectedText: '#selected-button-text',
        standardBtnClass: '.standard-btn-holder',
        btnActiveClass: 'btn-active',
        containerType: '#container-type',
        containerCategoryStyle: '#containerCategory-style',
        containerStyle: '#container-style',
        containerHeaderStyle: '#container-header-style',
        panelStyle: '#panel-style',
        panelContainer: '#panel-container',
        categoryHeader: '#category-header',
        categoryHeaderStyle: '#container-header-style',
        groupHeader: '#group-header',
        groupHeaderStyle: '#container-header-style',
        panelControlId: '#panel-controlId',
        textInputStyle: '#text-input-style',
        inputTextPosition: '#control-labelPosition',
        inputTextWidth: '#control-widthText',
        inputTextMaxChar: '#control-maxchar-text',
        inputTextLabel: '#control-inputText',
        inputTextHover: '#control-hover-input-text',
        inputTextHelpKey: '#control-hover-input-key'

    };

    var buttonTypes = {
        button: 'Button',
        standardButton: 'Standard Button',
        customButton: 'Custom Button'
    };

    var gridConstant = {
        gridListContainer: '.gridListContainer',
        gridListContainerLi: '.gridListContainer li',
        attrContainment: 'parent',
        workspace: '.workspace',
        gridPanelContainer: 'grid-panel-container',
        gridPanelHeader: 'grid-panel-header',
        gridContainerUL: '.gridContainer > ul',
        handleButton: '.handleButton',
        addLayoutPanel: '#addLayoutPanel',
        scriptTemplateGridPanel: '#scriptTemplate_gridpanel',
        fieldContainer: '.fieldContainer',
        testingContainer: '#testing-container',
        parentControl: 'parentControl',
        uiStateHover: 'ui-state-hover',
        gridContainer: '.grid_container',
        ulGridListContainerLI: 'ul.gridListContainer li',
        gridPanel: 'grid-panel',
        filter: '.new-Control, .grid_panel, .hidden-workspace',
        formBuilderForm: '#formBuilderForm',
        panelCol: '#panelCol',
        panelRow: '#panelRow'
    };

    var formSchema = {
        Metadata: 'Metadata',
        Panels: 'Panels',
        Controls: 'Controls',
        Properties: 'Properties',
        Count: 'Count',
        workspaceSchema: 'Workspace'
    };

    var containerTypes = {
        panel: 'Panel',
        groupBox: 'Group Box',
        categoryBox: 'Category Box'
    };

    return {
        workSpaceConstant: workSpaceConstant,
        propertyPanelConstant: propertyPanelConstant,
        controlConstant: controlConstant,
        controlTypes: controlTypes,
        formAPIs: formAPIs,
        gridConstant: gridConstant,
        formSchema: formSchema,
        tabNames: tabNames,
        buttonTypes: buttonTypes,
        containerTypes: containerTypes
    };
}());
